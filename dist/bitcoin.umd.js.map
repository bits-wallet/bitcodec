{"version":3,"file":"bitcoin.umd.js","mappings":";;;;;;;;;;;AAAa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB,GAAG,kBAAkB,GAAG,mBAAmB,GAAG,sBAAsB,GAAG,cAAc,GAAG,iBAAiB;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oCAAoC,iBAAiB,KAAK;AAC3D;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;;;;;;;;;;ACpEa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB,GAAG,kBAAkB,GAAG,iBAAiB;AAC1D,eAAe,mBAAO,CAAC,2DAAU;AACjC,6CAA4C,EAAE,qCAAqC,8BAA8B,EAAC;AAClH,cAAc,mBAAO,CAAC,yDAAS;AAC/B,8CAA6C,EAAE,qCAAqC,yBAAyB,EAAC;AAC9G,aAAa,mBAAO,CAAC,uDAAQ;AAC7B,6CAA4C,EAAE,qCAAqC,uBAAuB,EAAC;AAC3G;;;;;;;;;;;ACTa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,YAAY;AACZ,iBAAiB,mBAAO,CAAC,2DAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;;;;;;;;;;;ACXa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,aAAa;AACb,iBAAiB,mBAAO,CAAC,2DAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;;;;;;;;;;AClBY;;AAEZ,kBAAkB;AAClB,mBAAmB;AACnB,qBAAqB;;AAErB;AACA;AACA;;AAEA;AACA,mCAAmC,SAAS;AAC5C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB,SAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2CAA2C,UAAU;AACrD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;ACrJA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEY;;AAEZ,eAAe,mBAAO,CAAC,oDAAW;AAClC,gBAAgB,mBAAO,CAAC,gDAAS;AACjC;AACA;AACA;AACA;;AAEA,cAAc;AACd,kBAAkB;AAClB,yBAAyB;;AAEzB;AACA,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,YAAY;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,wCAAwC,SAAS;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC;AACA;AACA;;AAEA;AACA;AACA,cAAc,iBAAiB;AAC/B;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,SAAS;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,SAAS;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,SAAS;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iDAAiD,EAAE;AACnD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,kBAAkB,SAAS;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,eAAe;AACxC;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,yBAAyB,QAAQ;AACjC;AACA,sBAAsB,eAAe;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,cAAc,YAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,sBAAsB,SAAS;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,sBAAsB,SAAS;AAC/B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,sBAAsB,SAAS;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB,sBAAsB;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA,qBAAqB,WAAW,GAAG,IAAI;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA,gBAAgB,WAAW,GAAG,IAAI,KAAK,aAAa;AACpD;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB;;AAEA;AACA,GAAG;AACH;AACA;AACA,mBAAmB,KAAK,mDAAmD,cAAc;AACzF,GAAG;AACH;AACA;AACA,+BAA+B,IAAI;AACnC;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,MAAM,aAAa,SAAS;AACtD;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,SAAS,gBAAgB;AACzB,cAAc,oBAAoB,EAAE,IAAI;AACxC;AACA,YAAY,gBAAgB,EAAE,IAAI;AAClC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,GAAG,SAAS,GAAG,KAAK,qBAAqB,EAAE,EAAE;AACpE,QAAQ;AACR,yBAAyB,GAAG,KAAK,yBAAyB,EAAE,EAAE;AAC9D,mBAAmB,yBAAyB,EAAE,EAAE;AAChD;AACA,MAAM;AACN,oBAAoB,IAAI,EAAE,GAAG,SAAS,IAAI,EAAE,EAAE;AAC9C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,0CAA0C,cAAc,SAAS,OAAO;AACxE;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,YAAY;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,kBAAkB,gBAAgB;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,gBAAgB;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA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","sources":["webpack://[name]/./node_modules/@bitmatrix/int53/common.js","webpack://[name]/./node_modules/@bitmatrix/int53/index.js","webpack://[name]/./node_modules/@bitmatrix/int53/read.js","webpack://[name]/./node_modules/@bitmatrix/int53/write.js","webpack://[name]/./node_modules/base64-js/index.js","webpack://[name]/./node_modules/buffer/index.js","webpack://[name]/./node_modules/ieee754/index.js","webpack://[name]/./src/bitcoin/TxCodec.ts","webpack://[name]/./src/bitcoin/WitnessLocktimeCodec.ts","webpack://[name]/./src/bitcoin/converter.ts","webpack://[name]/./src/bitcoin/helper.ts","webpack://[name]/./src/bitcoin/someCodecs.ts","webpack://[name]/./src/index.ts","webpack://[name]/./src/lib/CAllBuffer.ts","webpack://[name]/./src/lib/CArray.ts","webpack://[name]/./src/lib/CBuffer.ts","webpack://[name]/./src/lib/CNumber.ts","webpack://[name]/./src/lib/CObject.ts","webpack://[name]/./src/lib/CString.ts","webpack://[name]/./src/lib/CVarArray.ts","webpack://[name]/./src/lib/CVarBuffer.ts","webpack://[name]/./src/lib/CVarString.ts","webpack://[name]/./src/lib/CVarUIntBitcoin.ts","webpack://[name]/./src/models/NumberTypes.ts","webpack://[name]/./src/util.ts","webpack://[name]/webpack/bootstrap","webpack://[name]/./src/bitcoin.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toDouble = exports.intHighLow = exports.uintHighLow = exports.onesComplement = exports.assert = exports.Int53Type = void 0;\nconst MAX_UINT32 = 0x00000000ffffffff;\nconst MAX_INT53 = 0x001fffffffffffff;\nvar Int53Type;\n(function (Int53Type) {\n    Int53Type[\"Int64BE\"] = \"Int64BE\";\n    Int53Type[\"Int64LE\"] = \"Int64LE\";\n    Int53Type[\"UInt64BE\"] = \"UInt64BE\";\n    Int53Type[\"UInt64LE\"] = \"UInt64LE\";\n})(Int53Type = exports.Int53Type || (exports.Int53Type = {}));\nconst assert = (test, message) => {\n    if (!test)\n        throw new Error(message);\n};\nexports.assert = assert;\nconst onesComplement = (number) => {\n    number = ~number;\n    if (number < 0) {\n        number = (number & 0x7fffffff) + 0x80000000;\n    }\n    return number;\n};\nexports.onesComplement = onesComplement;\nconst uintHighLow = (number) => {\n    (0, exports.assert)(number > -1 && number <= MAX_INT53, \"number out of range\");\n    (0, exports.assert)(Math.floor(number) === number, \"number must be an integer\");\n    var high = 0;\n    var signbit = number & 0xffffffff;\n    var low = signbit < 0 ? (number & 0x7fffffff) + 0x80000000 : signbit;\n    if (number > MAX_UINT32) {\n        high = (number - low) / (MAX_UINT32 + 1);\n    }\n    return [high, low];\n};\nexports.uintHighLow = uintHighLow;\nconst intHighLow = (number) => {\n    if (number > -1) {\n        return (0, exports.uintHighLow)(number);\n    }\n    var hl = (0, exports.uintHighLow)(-number);\n    var high = (0, exports.onesComplement)(hl[0]);\n    var low = (0, exports.onesComplement)(hl[1]);\n    if (low === MAX_UINT32) {\n        high += 1;\n        low = 0;\n    }\n    else {\n        low += 1;\n    }\n    return [high, low];\n};\nexports.intHighLow = intHighLow;\nconst toDouble = (high, low, signed) => {\n    if (signed && (high & 0x80000000) !== 0) {\n        high = (0, exports.onesComplement)(high);\n        low = (0, exports.onesComplement)(low);\n        (0, exports.assert)(high < 0x00200000, \"number too small\");\n        return -(high * (MAX_UINT32 + 1) + low + 1);\n    }\n    else {\n        //positive\n        (0, exports.assert)(high < 0x00200000, \"number too large\");\n        return high * (MAX_UINT32 + 1) + low;\n    }\n};\nexports.toDouble = toDouble;\n//# sourceMappingURL=common.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.readInt53 = exports.writeInt53 = exports.Int53Type = void 0;\nvar common_1 = require(\"./common\");\nObject.defineProperty(exports, \"Int53Type\", { enumerable: true, get: function () { return common_1.Int53Type; } });\nvar write_1 = require(\"./write\");\nObject.defineProperty(exports, \"writeInt53\", { enumerable: true, get: function () { return write_1.write; } });\nvar read_1 = require(\"./read\");\nObject.defineProperty(exports, \"readInt53\", { enumerable: true, get: function () { return read_1.read; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.read = void 0;\nconst common_1 = require(\"./common\");\nconst read = (int53Type, buffer, offset = 0) => {\n    const BE = int53Type.endsWith(\"BE\");\n    const [high, low] = BE ? [buffer.readUInt32BE(offset), buffer.readUInt32BE(offset + 4)] : [buffer.readUInt32LE(offset + 4), buffer.readUInt32LE(offset)];\n    const signed = int53Type.startsWith(\"Int\");\n    return (0, common_1.toDouble)(high, low, signed);\n};\nexports.read = read;\n//# sourceMappingURL=read.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.write = void 0;\nconst common_1 = require(\"./common\");\nconst write = (int53Type, number, buffer, offset = 0) => {\n    const signed = int53Type.startsWith(\"Int\");\n    const hl = signed ? (0, common_1.intHighLow)(number) : (0, common_1.uintHighLow)(number);\n    const BE = int53Type.endsWith(\"BE\");\n    if (BE) {\n        buffer.writeUInt32BE(hl[0], offset);\n        buffer.writeUInt32BE(hl[1], offset + 4);\n    }\n    else {\n        buffer.writeUInt32LE(hl[1], offset);\n        buffer.writeUInt32LE(hl[0], offset + 4);\n    }\n};\nexports.write = write;\n//# sourceMappingURL=write.js.map","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","import { toTxSegwit, toTxSegwitBase } from \"./converter\";\nimport { buffer2hex, hex2buffer } from \"./helper\";\nimport { TxSegwit } from \"./models/TxSegwit\";\nimport { TxSegwitBase } from \"./models/TxSegwitBase\";\nimport { TxSegwitParsed } from \"./models/TxSegwitParsed\";\nimport { TxStandart } from \"./models/TxStandart\";\n\nimport { Tx, TxWitnessBase } from \"./someCodecs\";\nimport { WitnessLocktimeCodec } from \"./WitnessLocktimeCodec\";\n\nexport const TxCodec = {\n  encode: (txObject: TxStandart | TxSegwit): string => {\n    const txObjectHex = hex2buffer(txObject);\n    let resultBuffer: Buffer = Buffer.alloc(0);\n\n    const standartTx = (txObject as TxSegwit).marker === undefined;\n    if (standartTx) {\n      resultBuffer = Tx.encode(txObjectHex);\n    } else {\n      const witnessLocktimeCodec = new WitnessLocktimeCodec(txObject.inputs.length);\n      const witnessArray = (txObject as TxSegwit).inputs.map((input) => input.witness);\n      const witnessLocktimeHexBuffer = witnessLocktimeCodec.encode(hex2buffer({ witness: witnessArray, locktime: txObject.locktime }));\n      const witnessLocktimeHex = buffer2hex(witnessLocktimeHexBuffer);\n\n      const txSegwitBase: TxSegwitBase = toTxSegwitBase(txObject as TxSegwit, witnessLocktimeHex);\n      resultBuffer = TxWitnessBase.encode(hex2buffer(txSegwitBase));\n    }\n\n    const resultHex = buffer2hex(resultBuffer);\n    return resultHex;\n  },\n\n  decode: (txHex: string): TxStandart | TxSegwit => {\n    const txBuffer = hex2buffer(txHex);\n    let resultBuffer: any;\n\n    const standartTx = txHex.substr(8, 4) !== \"0001\";\n    if (standartTx) {\n      resultBuffer = Tx.decode(txBuffer);\n      const txStandart = buffer2hex(resultBuffer);\n      return txStandart;\n    } else {\n      const txWitnessBaseBuffer = TxWitnessBase.decode(txBuffer);\n      const txWitnessBase = buffer2hex(txWitnessBaseBuffer);\n\n      const witnessLocktimeCodec = new WitnessLocktimeCodec(txWitnessBase.inputs.length);\n      const witnessLocktimeDataBuffer = witnessLocktimeCodec.decode(hex2buffer(txWitnessBase.witness_locktime));\n      const witnessLocktimeData = buffer2hex(witnessLocktimeDataBuffer);\n\n      const txSegwitParsed: TxSegwitParsed = {\n        version: txWitnessBase.version,\n        marker: txWitnessBase.marker,\n        flag: txWitnessBase.flag,\n        inputs: txWitnessBase.inputs,\n        outputs: txWitnessBase.outputs,\n        witness: witnessLocktimeData.witness,\n        locktime: witnessLocktimeData.locktime,\n      };\n      const txSegwit = toTxSegwit(txSegwitParsed);\n      return txSegwit;\n    }\n  },\n};\n","import bitcodec from \"../\";\nimport { IBitcodec } from \"../models/IBitcodec\";\nimport { buffer2hex, hex2buffer } from \"./helper\";\n\nexport class WitnessLocktimeCodec implements IBitcodec<{ witness: string[][]; locktime: number }> {\n  private witnessLocktimeData = bitcodec.Object([\n    [\"witness\", bitcodec.VarArray(bitcodec.VarUIntBitcoin, bitcodec.VarArray(bitcodec.VarUIntBitcoin, bitcodec.VarBuffer(bitcodec.VarUIntBitcoin)))],\n    [\"locktime\", bitcodec.Number.UInt32LE],\n  ]);\n  private inputsCount;\n\n  encodeBytes: number;\n  decodeBytes: number;\n  encodingLength: (t?: any) => number;\n\n  constructor(inputsCount: number) {\n    this.inputsCount = inputsCount;\n    this.encodeBytes = this.witnessLocktimeData.encodeBytes;\n    this.decodeBytes = this.witnessLocktimeData.decodeBytes;\n    this.encodingLength = this.witnessLocktimeData.encodingLength;\n  }\n\n  encode = (value: any, buffer?: Buffer | undefined, offset?: number | undefined): Buffer => {\n    const result = this.witnessLocktimeData.encode(value, buffer, offset).slice(1);\n\n    this.encodeBytes = this.witnessLocktimeData.encodeBytes;\n    this.decodeBytes = this.witnessLocktimeData.decodeBytes;\n    this.encodingLength = this.witnessLocktimeData.encodingLength;\n\n    return result;\n  };\n\n  decode = (buffer: Buffer, offset?: number | undefined, end?: number | undefined): { witness: string[][]; locktime: number } => {\n    const inputCountHex = this.inputsCount.toString(16).padStart(2, \"0\");\n    const bufferHex = buffer2hex(buffer);\n    const newBuffer = hex2buffer(inputCountHex + bufferHex);\n    const result = this.witnessLocktimeData.decode(newBuffer, offset, end);\n\n    this.encodeBytes = this.witnessLocktimeData.encodeBytes;\n    this.decodeBytes = this.witnessLocktimeData.decodeBytes;\n    this.encodingLength = this.witnessLocktimeData.encodingLength;\n\n    return result as { witness: string[][]; locktime: number };\n  };\n}\n","import { TxSegwit } from \"./models/TxSegwit\";\nimport { TxSegwitBase } from \"./models/TxSegwitBase\";\nimport { TxSegwitParsed } from \"./models/TxSegwitParsed\";\n\nexport const toTxSegwit = (txSegwitParsed: TxSegwitParsed): TxSegwit => {\n  const txSegwit: TxSegwit = {\n    version: txSegwitParsed.version,\n    marker: txSegwitParsed.marker,\n    flag: txSegwitParsed.flag,\n    inputs: [],\n    outputs: txSegwitParsed.outputs,\n    locktime: txSegwitParsed.locktime,\n  };\n\n  txSegwitParsed.inputs.forEach((input, index) => {\n    txSegwit.inputs.push({\n      hash: input.hash,\n      index: input.index,\n      script: input.script,\n      witness: txSegwitParsed.witness[index],\n      sequence: input.sequence,\n    });\n  });\n\n  return txSegwit;\n};\n\nexport const toTxSegwitParsed = (txSegwit: TxSegwit): TxSegwitParsed => {\n  const txSegwitParsed: TxSegwitParsed = {\n    version: txSegwit.version,\n    marker: txSegwit.marker,\n    flag: txSegwit.flag,\n    inputs: [],\n    outputs: txSegwit.outputs,\n    witness: [],\n    locktime: txSegwit.locktime,\n  };\n\n  txSegwit.inputs.forEach((input, index) => {\n    txSegwitParsed.inputs.push({\n      hash: input.hash,\n      index: input.index,\n      script: input.script,\n      sequence: input.sequence,\n    });\n\n    txSegwitParsed.witness.push(txSegwitParsed.witness[index]);\n  });\n\n  return txSegwitParsed;\n};\n\nexport const toTxSegwitBase = (txSegwit: TxSegwit, witnessLocktimeHex: string): TxSegwitBase => {\n  const txSegwitBase: TxSegwitBase = {\n    version: txSegwit.version,\n    marker: txSegwit.marker,\n    flag: txSegwit.flag,\n    inputs: [],\n    outputs: txSegwit.outputs,\n    witness_locktime: witnessLocktimeHex,\n  };\n\n  txSegwit.inputs.forEach((input, index) => {\n    txSegwitBase.inputs.push({\n      hash: input.hash,\n      index: input.index,\n      script: input.script,\n      sequence: input.sequence,\n    });\n  });\n\n  return txSegwitBase;\n};\n","export function buffer2hex(obj: any) {\n  if (Array.isArray(obj)) obj = obj.map(buffer2hex);\n\n  if (Buffer.isBuffer(obj)) obj = obj.toString(\"hex\");\n  else if (typeof obj === \"object\") {\n    for (var k in obj) {\n      if (Buffer.isBuffer(obj[k])) obj[k] = obj[k].toString(\"hex\");\n      else if (Array.isArray(obj[k])) obj[k] = obj[k].map(buffer2hex);\n      else if (typeof obj[k] === \"object\") obj[k] = buffer2hex(obj[k]);\n    }\n  }\n\n  return obj;\n}\n\nexport function isHex(s: string) {\n  return s.length % 2 === 0 && /^[0-9a-f]*$/.test(s);\n}\n\nexport function hex2buffer(obj: any) {\n  if (Buffer.isBuffer(obj)) return obj;\n\n  if (Array.isArray(obj)) obj = obj.map(hex2buffer);\n  else if (typeof obj === \"object\") {\n    for (var k in obj) {\n      if (Array.isArray(obj[k])) obj[k] = obj[k].map(hex2buffer);\n      else if (typeof obj[k] === \"string\" && isHex(obj[k])) obj[k] = Buffer.from(obj[k], \"hex\");\n    }\n  }\n\n  if (typeof obj === \"string\" && isHex(obj)) obj = Buffer.from(obj, \"hex\");\n  return obj;\n}\n","import bitcodec from \"../\";\n\nconst TxVersion = bitcodec.Number.UInt32LE; // int32_t\nconst TxInput = bitcodec.Object([\n  { name: \"hash\", type: bitcodec.Buffer(32) },\n  { name: \"index\", type: bitcodec.Number.UInt32LE },\n  { name: \"script\", type: bitcodec.VarBuffer(bitcodec.VarUIntBitcoin) },\n  { name: \"sequence\", type: bitcodec.Number.UInt32LE }, // uint32_t\n]);\nconst TxInputs = bitcodec.VarArray(bitcodec.VarUIntBitcoin, TxInput);\nconst TxOutput = bitcodec.Object([\n  { name: \"value\", type: bitcodec.Number.UInt64LE }, // int64_t\n  { name: \"script\", type: bitcodec.VarBuffer(bitcodec.VarUIntBitcoin) },\n]);\nconst TxOutputs = bitcodec.VarArray(bitcodec.VarUIntBitcoin, TxOutput);\nconst TxLocktime = bitcodec.Number.UInt32LE; // uint32_t\nexport const Tx = bitcodec.Object([\n  { name: \"version\", type: TxVersion },\n  { name: \"inputs\", type: TxInputs }, // compactSize uint\n  { name: \"outputs\", type: TxOutputs }, // compactSize uint\n  { name: \"locktime\", type: TxLocktime },\n]);\nexport const TxWitnessBase = bitcodec.Object([\n  { name: \"version\", type: TxVersion },\n  { name: \"marker\", type: bitcodec.Byte },\n  { name: \"flag\", type: bitcodec.Byte },\n  { name: \"inputs\", type: TxInputs },\n  { name: \"outputs\", type: TxOutputs },\n  { name: \"witness_locktime\", type: bitcodec.AllBuffer },\n]);\n","import { IBitcodec } from \"./models/IBitcodec\";\nimport { BitcodecItem } from \"./models/BitcodecItem\";\nimport { EncodingType } from \"./models/EncodingType\";\nimport { NumberTypes } from \"./models/NumberTypes\";\n\nimport { CAllBuffer } from \"./lib/CAllBuffer\";\nimport { CArray } from \"./lib/CArray\";\nimport { CBuffer } from \"./lib/CBuffer\";\nimport { CNumber } from \"./lib/CNumber\";\nimport { CObject } from \"./lib/CObject\";\nimport { CString } from \"./lib/CString\";\nimport { CVarArray } from \"./lib/CVarArray\";\nimport { CVarBuffer } from \"./lib/CVarBuffer\";\nimport { CVarString } from \"./lib/CVarString\";\nimport { CVarUIntBitcoin } from \"./lib/CVarUIntBitcoin\";\n\nexport default {\n  AllBuffer: new CAllBuffer(),\n  Array: (length: number, anyCodec: IBitcodec<any>) => new CArray(length, anyCodec),\n  Buffer: (length: number) => new CBuffer(length),\n  Byte: new CNumber(NumberTypes.UInt8, 1),\n  Number: {\n    Int8: new CNumber(NumberTypes.Int8, 1),\n    UInt8: new CNumber(NumberTypes.UInt8, 1),\n    Int16BE: new CNumber(NumberTypes.Int16BE, 2),\n    Int16LE: new CNumber(NumberTypes.Int16LE, 2),\n    UInt16BE: new CNumber(NumberTypes.UInt16BE, 2),\n    UInt16LE: new CNumber(NumberTypes.UInt16LE, 2),\n    Int32BE: new CNumber(NumberTypes.Int32BE, 4),\n    Int32LE: new CNumber(NumberTypes.Int32LE, 4),\n    UInt32BE: new CNumber(NumberTypes.UInt32BE, 4),\n    UInt32LE: new CNumber(NumberTypes.UInt32LE, 4),\n    Int64BE: new CNumber(NumberTypes.Int64BE, 8),\n    Int64LE: new CNumber(NumberTypes.Int64LE, 8),\n    UInt64BE: new CNumber(NumberTypes.UInt64BE, 8),\n    UInt64LE: new CNumber(NumberTypes.UInt64LE, 8),\n    FloatBE: new CNumber(NumberTypes.FloatBE, 4),\n    FloatLE: new CNumber(NumberTypes.FloatLE, 4),\n    DoubleBE: new CNumber(NumberTypes.DoubleBE, 8),\n    DoubleLE: new CNumber(NumberTypes.DoubleLE, 8),\n  },\n  Object: (items: BitcodecItem[]) => new CObject(items),\n  String: (length: number, encodingType: EncodingType = \"utf8\") => new CString(length, encodingType),\n  VarArray: (lengthType: IBitcodec<any>, anyCodec: IBitcodec<any>) => new CVarArray(lengthType, anyCodec),\n  VarBuffer: (anyCodec: IBitcodec<any>) => new CVarBuffer(anyCodec),\n  VarString: (anyCodec: IBitcodec<any>, encodingType: EncodingType = \"utf8\") => new CVarString(anyCodec, encodingType),\n  VarUIntBitcoin: new CVarUIntBitcoin(),\n};\n","import { IBitcodec } from \"../models/IBitcodec\";\n\nexport class CAllBuffer implements IBitcodec<Buffer> {\n  private length: number;\n  encodingLength = (): number => this.length;\n\n  encodeBytes: number;\n  decodeBytes: number;\n\n  constructor() {\n    this.length = 0;\n    this.encodeBytes = 0;\n    this.decodeBytes = 0;\n  }\n\n  encode = (value: Buffer, buffer?: Buffer, offset = 0): Buffer => {\n    if (!Buffer.isBuffer(value)) throw new TypeError(\"value must be a Buffer instance\"); // for CArray encode iter\n    this.length = value.length - offset;\n    if (!buffer) return Buffer.from(value);\n    if (offset + this.length > buffer.length) throw new RangeError(\"destination buffer is too small\");\n    value.copy(buffer, offset);\n    return buffer;\n  };\n\n  decode = (buffer: Buffer, offset = 0, end?: number): Buffer => {\n    if (!end) end = buffer.length;\n    this.length = buffer.length - offset;\n    if (offset + this.length > end) throw new RangeError(\"not enough data for decode\");\n    return Buffer.from(buffer.slice(offset, offset + this.length));\n  };\n}\n","import * as util from \"../util\";\nimport { IBitcodec } from \"../models/IBitcodec\";\nimport { CBuffer } from \"./CBuffer\";\n\nexport class CArray implements IBitcodec<any[]> {\n  private length: number;\n  private anyCodec: IBitcodec<any>;\n\n  private calcLength = (items: any[]) => {\n    return util.size(items, this.anyCodec.encodingLength);\n  };\n\n  encodingLength = (array?: any[]): number => {\n    if (array === undefined) throw new TypeError(\"value must be an Array instance\");\n    if (array.length !== this.length) throw new RangeError(\"value.length is out of bounds\");\n    return this.calcLength(array);\n  };\n\n  encodeBytes: number;\n  decodeBytes: number;\n\n  constructor(length: number, anyCodec: IBitcodec<any>) {\n    this.length = length;\n    this.anyCodec = anyCodec;\n    this.encodeBytes = length;\n    this.decodeBytes = length;\n  }\n\n  encode = (value: any[], buffer?: Buffer, offset = 0): Buffer => {\n    if (value.length !== this.length) throw new RangeError(\"value.length is out of bounds\");\n    if (!buffer) buffer = Buffer.allocUnsafe(this.calcLength(value));\n\n    const typeEncode = this.anyCodec.encode;\n    const typeEncodeBytes = this.anyCodec.encodeBytes;\n\n    /* this.encodeBytes =\n      value.reduce((previusValue, currentItem, _) => {\n        this.anyCodec.encode(currentItem, buffer, previusValue);\n        const newAnyCodecEncodeBytes = this.anyCodec.encodeBytes;\n        return previusValue + newAnyCodecEncodeBytes;\n      }, offset) - offset; */\n\n    this.encodeBytes =\n      util.size(\n        value,\n        function (item, index, loffset) {\n          typeEncode(item, buffer, loffset);\n          return typeEncodeBytes;\n        },\n        offset\n      ) - offset;\n    return buffer;\n  };\n\n  decode = (buffer: Buffer, offset = 0, end?: number): any[] => {\n    if (!offset) offset = 0;\n    const items = new Array(this.length);\n\n    const typeDecode = this.anyCodec.decode;\n    const typeDecodeBytes = this.anyCodec.decodeBytes;\n\n    /* this.decodeBytes =\n      items.reduce((previusValue, currentItem, currentIndex) => {\n        items[currentIndex] = this.anyCodec.decode(buffer, previusValue, end);\n        const newAnyCodecDecodeBytes = this.anyCodec.decodeBytes;\n        return previusValue + newAnyCodecDecodeBytes;\n      }, offset + offset) - offset; */\n\n    this.decodeBytes =\n      util.size(\n        items,\n        function (item, index, loffset) {\n          items[index || 0] = typeDecode(buffer, loffset, end);\n          return typeDecodeBytes;\n        },\n        offset\n      ) - offset;\n    return items;\n  };\n}\n","import { IBitcodec } from \"../models/IBitcodec\";\n\nexport class CBuffer implements IBitcodec<Buffer> {\n  private length: number;\n  encodingLength = (): number => this.length;\n\n  encodeBytes: number;\n  decodeBytes: number;\n\n  constructor(length: number) {\n    this.length = length;\n    this.encodeBytes = length;\n    this.decodeBytes = length;\n  }\n\n  encode = (value: Buffer, buffer?: Buffer, offset = 0): Buffer => {\n    if (!Buffer.isBuffer(value)) throw new TypeError(\"value must be a Buffer instance\"); // for CArray encode iter\n    if (value.length !== this.length) throw new RangeError(\"value.length is out of bounds\");\n    if (!buffer) return Buffer.from(value);\n    if (offset + this.length > buffer.length) throw new RangeError(\"destination buffer is too small\");\n    value.copy(buffer, offset);\n    return buffer;\n  };\n\n  decode = (buffer: Buffer, offset = 0, end?: number): Buffer => {\n    if (!end) end = buffer.length;\n    if (offset + this.length > end) throw new RangeError(\"not enough data for decode\");\n    return Buffer.from(buffer.slice(offset, offset + this.length));\n  };\n}\n","import { Int53Type, readInt53, writeInt53 } from \"@bitmatrix/int53\";\nimport { IBitcodec } from \"../models/IBitcodec\";\nimport { NumberTypes } from \"../models/NumberTypes\";\n\nexport class CNumber implements IBitcodec<number> {\n  private length: number;\n  private write: (buffer: Buffer, value: number, offset?: number) => void;\n  private read: (buffer: Buffer, offset?: number | undefined) => number;\n\n  encodingLength = (): number => this.length;\n\n  encodeBytes: number;\n  decodeBytes: number;\n\n  constructor(numberType: NumberTypes, length: number) {\n    this.length = length;\n    this.encodeBytes = length;\n    this.decodeBytes = length;\n\n    if (Buffer.prototype[\"write\" + numberType]) {\n      this.write = (buffer: Buffer, value: number, offset?: number) => {\n        return (buffer as any)[\"write\" + numberType](value, offset);\n      };\n    } else {\n      this.write = (buffer: Buffer, value: number, offset?: number) => {\n        return writeInt53(numberType as unknown as Int53Type, value, buffer, offset);\n      };\n    }\n\n    if (Buffer.prototype[\"read\" + numberType]) {\n      this.read = (buffer: Buffer, offset?: number) => {\n        return (buffer as any)[\"read\" + numberType](offset);\n      };\n    } else {\n      this.read = (buffer: Buffer, offset?: number) => {\n        return readInt53(numberType as unknown as Int53Type, buffer, offset);\n      };\n    }\n  }\n\n  encode = (value: number, buffer?: Buffer, offset = 0): Buffer => {\n    buffer = buffer || Buffer.allocUnsafe(this.length);\n\n    this.write(buffer, value, offset);\n    return buffer;\n  };\n\n  decode = (buffer: Buffer, offset = 0, end?: number): number => {\n    if (!end) return this.read(buffer, offset);\n    return this.read(buffer.slice(offset, end), 0);\n  };\n}\n","import { BitcodecItem } from \"../models/BitcodecItem\";\nimport { IBitcodec } from \"../models/IBitcodec\";\n\nexport class CObject implements IBitcodec<object> {\n  private items: { name: string; type: IBitcodec<any> }[];\n\n  encodeBytes: number;\n  decodeBytes: number;\n  encodingLength: (t?: object) => number;\n\n  constructor(items: BitcodecItem[]) {\n    this.items = items.map((item: BitcodecItem) => (Array.isArray(item) ? { name: item[0], type: item[1] } : item));\n\n    this.encodeBytes = 0;\n    this.decodeBytes = 0;\n\n    this.encodingLength = (o?: object): number => {\n      if (o === undefined) throw new TypeError(\"Expected Object, got \" + o);\n      return this.items.reduce((previousValue: number, currentValue: { name: string; type: IBitcodec<any> }) => {\n        const value = (o as any)[currentValue.name];\n        return previousValue + currentValue.type.encodingLength(value);\n      }, 0);\n    };\n  }\n\n  encode = (object: object, buffer?: Buffer, offset = 0): Buffer => {\n    const bytes = this.encodingLength(object);\n    if (buffer === undefined) buffer = Buffer.allocUnsafe(bytes);\n    else if (buffer.length - offset < bytes) throw new RangeError(\"destination buffer is too small\");\n\n    this.items.forEach((item) => {\n      const value = (object as any)[item.name];\n      item.type.encode(value, buffer, offset);\n      offset += item.type.encodeBytes;\n    });\n    this.encodeBytes = bytes;\n    return buffer;\n  };\n\n  decode = (buffer: Buffer, offset: number = 0, end?: number | undefined): object => {\n    let result = {};\n    const start = offset;\n\n    this.items.forEach((item) => {\n      const value = item.type.decode(buffer, offset, end);\n      offset += item.type.decodeBytes;\n      (result as any)[item.name] = value;\n    });\n    this.decodeBytes = offset - start;\n\n    return result;\n  };\n}\n","import { EncodingType } from \"../models/EncodingType\";\nimport { IBitcodec } from \"../models/IBitcodec\";\nimport { CBuffer } from \"./CBuffer\";\n\nexport class CString implements IBitcodec<string> {\n  private length: number;\n  private bufferCodec: IBitcodec<Buffer>;\n  private encodingType: EncodingType;\n\n  encodingLength: (value?: string) => number;\n\n  encodeBytes: number;\n  decodeBytes: number;\n\n  constructor(length: number, encodingType: EncodingType = \"utf8\") {\n    this.length = length;\n    this.encodingType = encodingType;\n    this.bufferCodec = new CBuffer(this.length);\n\n    this.encodeBytes = length;\n    this.decodeBytes = length;\n\n    this.encodingLength = (value?: string) => this.length;\n  }\n\n  encode = (value: string, buffer?: Buffer, offset = 0): Buffer => {\n    if (Buffer.byteLength(value, this.encodingType) !== this.length) throw new RangeError(\"value.length is out of bounds\");\n    if (!buffer) return Buffer.from(value, this.encodingType);\n    if (offset + this.length > buffer.length) throw new RangeError(\"destination buffer is too small\");\n\n    buffer.write(value, offset, length, this.encodingType);\n    return buffer;\n  };\n\n  decode = (buffer: Buffer, offset = 0, end?: number): string => this.bufferCodec.decode(buffer, offset, end).toString(this.encodingType);\n}\n","import * as util from \"../util\";\nimport { IBitcodec } from \"../models/IBitcodec\";\nimport { CBuffer } from \"./CBuffer\";\n\nexport class CVarArray implements IBitcodec<any[]> {\n  private length: number = -1;\n  private lengthType: IBitcodec<any>;\n  private anyCodec: IBitcodec<any>;\n\n  private calcLength = (items: any[]) => {\n    return util.size(items, this.anyCodec.encodingLength, this.lengthType.encodingLength(items.length));\n  };\n\n  encodingLength = (array?: any[]): number => {\n    if (array === undefined) throw new TypeError(\"value must be an Array instance\");\n    return this.calcLength(array);\n  };\n\n  encodeBytes: number = -1;\n  decodeBytes: number = -1;\n\n  constructor(lengthType: IBitcodec<any>, anyCodec: IBitcodec<any>) {\n    this.lengthType = lengthType;\n    this.anyCodec = anyCodec;\n  }\n\n  encode = (value: any[], buffer?: Buffer, offset = 0): Buffer => {\n    if (!buffer) buffer = Buffer.allocUnsafe(this.calcLength(value));\n\n    this.lengthType.encode(value.length, buffer, offset);\n\n    /* this.encodeBytes =\n      value.reduce((previusValue, currentItem, _) => {\n        this.anyCodec.encode(currentItem, buffer, previusValue);\n        const newAnyCodecEncodeBytes = this.anyCodec.encodeBytes;\n        return previusValue + newAnyCodecEncodeBytes;\n      }, this.lengthType.encodeBytes + offset) - offset; */\n\n    this.encodeBytes =\n      util.size(\n        value,\n        (item, index, loffset) => {\n          this.anyCodec.encode(item, buffer, loffset);\n          return this.anyCodec.encodeBytes;\n        },\n        this.lengthType.encodeBytes + offset\n      ) - offset;\n\n    return buffer;\n  };\n\n  decode = (buffer: Buffer, offset = 0, end?: number): any[] => {\n    if (!offset) offset = 0;\n    const items = new Array(this.lengthType.decode(buffer, offset, end));\n\n    /* this.decodeBytes =\n      items.reduce((previusValue, currentItem, currentIndex) => {\n        items[currentIndex] = this.anyCodec.decode(buffer, previusValue, end);\n        const newAnyCodecDecodeBytes = this.anyCodec.decodeBytes;\n        return previusValue + newAnyCodecDecodeBytes;\n      }, this.lengthType.decodeBytes + offset) - offset; */\n\n    this.decodeBytes =\n      util.size(\n        items,\n        (item, index, loffset) => {\n          items[index || 0] = this.anyCodec.decode(buffer, loffset, end);\n          return this.anyCodec.decodeBytes;\n        },\n        this.lengthType.decodeBytes + offset\n      ) - offset;\n    return items;\n  };\n}\n","import { IBitcodec } from \"../models/IBitcodec\";\n\nexport class CVarBuffer implements IBitcodec<any> {\n  private anyCodec: IBitcodec<any>;\n  encodingLength: (buffer?: Buffer) => number;\n\n  encodeBytes: number;\n  decodeBytes: number;\n\n  constructor(anyCodec: IBitcodec<any>) {\n    this.anyCodec = anyCodec;\n    this.encodeBytes = 0;\n    this.decodeBytes = 0;\n\n    this.encodingLength = (buffer?: Buffer) => {\n      if (buffer === undefined) throw new TypeError(\"value must be a Buffer instance\"); // for CArray encode iter\n      return this.anyCodec.encodingLength(buffer.length) + buffer.length;\n    };\n  }\n\n  encode = (value: Buffer, buffer?: Buffer, offset = 0): Buffer => {\n    const bytes = this.encodingLength(value);\n    if (!buffer) buffer = Buffer.allocUnsafe(bytes);\n    else if (buffer.length - offset < bytes) throw new RangeError(\"destination buffer is too small\");\n\n    this.anyCodec.encode(value.length, buffer, offset);\n    offset += this.anyCodec.encodeBytes;\n\n    value.copy(buffer, offset);\n    this.encodeBytes = bytes;\n\n    return buffer;\n  };\n\n  decode = (buffer: Buffer, offset = 0, end?: number): Buffer => {\n    if (end === undefined) end = buffer.length;\n    const start = offset;\n\n    const length = this.anyCodec.decode(buffer, offset, end);\n    offset += this.anyCodec.decodeBytes;\n\n    if (offset + length > end) throw new RangeError(\"not enough data for decode\");\n\n    this.decodeBytes = offset + length - start;\n    return Buffer.from(buffer.slice(offset, offset + length));\n  };\n}\n","import { EncodingType } from \"../models/EncodingType\";\nimport { IBitcodec } from \"../models/IBitcodec\";\nimport { CVarBuffer } from \"./CVarBuffer\";\n\nexport class CVarString implements IBitcodec<string> {\n  private anyCodec: IBitcodec<any>;\n  private encodingType: EncodingType;\n  private varBufferCodec: CVarBuffer;\n  encodingLength: (value?: string) => number;\n\n  encodeBytes: number;\n  decodeBytes: number;\n\n  constructor(anyCodec: IBitcodec<any>, encodingType: EncodingType = \"utf8\") {\n    this.anyCodec = anyCodec;\n    this.encodingType = encodingType;\n    this.varBufferCodec = new CVarBuffer(anyCodec);\n\n    this.encodeBytes = 0;\n    this.decodeBytes = 0;\n\n    this.encodingLength = (value?: string) => {\n      if (value === undefined) throw new TypeError(\"value must be a string\");\n      const valueLength = Buffer.byteLength(value, this.encodingType);\n      return this.anyCodec.encodingLength(value.length) + valueLength;\n    };\n  }\n\n  encode = (value: string, buffer?: Buffer, offset = 0): Buffer => {\n    const valueLength = Buffer.byteLength(value, this.encodingType);\n    const bytes = this.anyCodec.encodingLength(value.length) + valueLength;\n\n    if (!buffer) buffer = Buffer.allocUnsafe(bytes);\n    if (offset + bytes > buffer.length) throw new RangeError(\"destination buffer is too small\");\n\n    this.anyCodec.encode(valueLength, buffer, offset);\n    offset += this.anyCodec.encodeBytes;\n    buffer.write(value, offset, valueLength, this.encodingType);\n\n    this.encodeBytes = bytes;\n    return buffer;\n  };\n\n  decode = (buffer: Buffer, offset = 0, end?: number): string => {\n    const str = this.varBufferCodec.decode(buffer, offset, end).toString(this.encodingType);\n    this.decodeBytes = this.varBufferCodec.decodeBytes;\n    return str;\n  };\n}\n","import { IBitcodec } from \"../models/IBitcodec\";\n\nexport class CVarUIntBitcoin implements IBitcodec<number> {\n  private MAX_SAFE_INTEGER: number = 9007199254740991;\n\n  private checkUInt53 = (n: number) => {\n    if (n < 0 || n > this.MAX_SAFE_INTEGER || n % 1 !== 0) throw new RangeError(\"value out of range\");\n  };\n\n  encodeBytes: number;\n  decodeBytes: number;\n  encodingLength: (t?: number | undefined) => number;\n\n  constructor() {\n    this.encodeBytes = 0;\n    this.decodeBytes = 0;\n    this.encodingLength = (number?: number) => {\n      if (number === undefined) throw new TypeError(\"Expected number, got undefined\");\n      this.checkUInt53(number);\n      return number < 0xfd ? 1 : number <= 0xffff ? 3 : number <= 0xffffffff ? 5 : 9;\n    };\n  }\n\n  encode = (value: number, buffer?: Buffer, offset: number = 0): Buffer => {\n    if (!buffer) buffer = Buffer.allocUnsafe(this.encodingLength(value));\n\n    // 8 bit\n    if (value < 0xfd) {\n      buffer.writeUInt8(value, offset);\n      this.encodeBytes = 1;\n\n      // 16 bit\n    } else if (value <= 0xffff) {\n      buffer.writeUInt8(0xfd, offset);\n      buffer.writeUInt16LE(value, offset + 1);\n      this.encodeBytes = 3;\n\n      // 32 bit\n    } else if (value <= 0xffffffff) {\n      buffer.writeUInt8(0xfe, offset);\n      buffer.writeUInt32LE(value, offset + 1);\n      this.encodeBytes = 5;\n\n      // 64 bit\n    } else {\n      buffer.writeUInt8(0xff, offset);\n      buffer.writeUInt32LE(value >>> 0, offset + 1);\n      buffer.writeUInt32LE((value / 0x100000000) | 0, offset + 5);\n      this.encodeBytes = 9;\n    }\n\n    return buffer;\n  };\n\n  decode = (buffer: Buffer, offset: number = 0, end?: number): number => {\n    const first = buffer.readUInt8(offset);\n\n    // 8 bit\n    if (first < 0xfd) {\n      this.decodeBytes = 1;\n      return first;\n\n      // 16 bit\n    } else if (first === 0xfd) {\n      this.decodeBytes = 3;\n      return buffer.readUInt16LE(offset + 1);\n\n      // 32 bit\n    } else if (first === 0xfe) {\n      this.decodeBytes = 5;\n      return buffer.readUInt32LE(offset + 1);\n\n      // 64 bit\n    } else {\n      this.decodeBytes = 9;\n      var lo = buffer.readUInt32LE(offset + 1);\n      var hi = buffer.readUInt32LE(offset + 5);\n      var number = hi * 0x0100000000 + lo;\n      this.checkUInt53(number);\n\n      return number;\n    }\n  };\n}\n","export enum NumberTypes {\n  Byte = \"UInt8\",\n  Int8 = \"Int8\",\n  UInt8 = \"UInt8\",\n  Int16BE = \"Int16BE\",\n  Int16LE = \"Int16LE\",\n  UInt16BE = \"UInt16BE\",\n  UInt16LE = \"UInt16LE\",\n  Int32BE = \"Int32BE\",\n  Int32LE = \"Int32LE\",\n  UInt32BE = \"UInt32BE\",\n  UInt32LE = \"UInt32LE\",\n  Int64BE = \"Int64BE\",\n  Int64LE = \"Int64LE\",\n  UInt64BE = \"UInt64BE\",\n  UInt64LE = \"UInt64LE\",\n  FloatBE = \"FloatBE\",\n  FloatLE = \"FloatLE\",\n  DoubleBE = \"DoubleBE\",\n  DoubleLE = \"DoubleLE\",\n}\n","export const size = <T>(items: T[], iter: (item?: T, index?: number, ac?: number) => number, acc: number = 0) => {\n  let result = acc;\n  for (let i = 0; i < items.length; i++) result += iter(items[i], i, result);\n  return result;\n\n  /* return items.reduce((previusValue, currentItem, currentIndex) => {\n    return previusValue + iter(items[currentIndex], currentIndex, previusValue);\n  }, acc); */\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { TxCodec } from \"./bitcoin/TxCodec\";\n\nexport { TxCodec };\n"],"names":[],"sourceRoot":""}